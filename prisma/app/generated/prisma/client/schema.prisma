generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  avatar      String?
  cover       String?
  name        String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime @default(now())

  posts      Post[]
  comments   Comment[]
  likes      Like[]
  followers  Follower[]      @relation("followers")
  followings Follower[]      @relation("followings")
  sender     FollowRequest[] @relation("sender")
  receiver   FollowRequest[] @relation("receiver")
  blocker    Block[]         @relation("blocker")
  blocked    Block[]         @relation("blocked")
  stories    Story[]
}

model Post {
  id        Int      @id @default(autoincrement())
  desc      String
  img       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user creates multiple posts
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  //each post have likes
  likes Like[]

  //each post have comments
  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // user have multiple comments
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  //multiple comments in a post
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  //each comment have likes
  likes Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //likes done by user
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  //likes of post
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?

  //likes of comment
  comment   Comment? @relation(fields: [commentID], references: [id], onDelete: Cascade)
  commentID Int?
}

model Follower {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  followers   User   @relation("followers", fields: [followersId], references: [id], onDelete: Cascade)
  followersId String
  followings  User   @relation("followings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  sender     User   @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   User   @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  blocker   User   @relation("blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User   @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img       String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
